) %>%
filter(!is.na(x) & !is.na(y))
View(riparias)
riparias_sf <- st_as_sf(riparias, coords = c("x", "y"), crs = 3857)
# 7. Exporteer naar GeoPackage (voor gebruik in ArcGIS/QGIS)
st_write(riparias_sf, "New_observations.gpkg", delete_dsn = TRUE)
# 5. Inlezen van de DVW-geometrieën
dvw_indeling <- st_read("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data/DVW_indeling.gpkg")
# of alternatief, gebruik de percelen:
# dvw_percelen <- st_read("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data/DVW_percelen.gpkg")
riparias_dvw <- riparias_sf[st_intersects(riparias_sf, dvw_indeling, sparse = FALSE), ]
t_crs(riparias_sf)
st_crs(riparias_sf)
riparias_sf <- st_transform(riparias_sf, crs = 31370)
st_crs(riparias_sf)
dvw_indeling <- st_read("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data/DVW_indeling.gpkg")
riparias_dvw <- riparias_sf[st_intersects(riparias_sf, dvw_indeling, sparse = FALSE), ]
intersectie_matrix <- st_intersects(riparias_sf, dvw_indeling, sparse = FALSE)
riparias_dvw <- riparias_sf[rowSums(intersectie_matrix) > 0, ]
riparias_dvw
data <- read.csv("./data/input/occurrences/0092676-240506114902167/0092676-240506114902167.csv", sep = "\t")
get<d()
getwd()
setwd(C:/Users/frederique_steen/Documents/GitHub/Camalien)
setwd("C:/Users/frederique_steen/Documents/GitHub/Camalien")
data <- read.csv("./data/input/occurrences/0092676-240506114902167/0092676-240506114902167.csv", sep = "\t")
View(data)
names(data)
riparias_sf
# 3. Dataset key van de Vlaamse Waterweg checklist
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
# 4. Haal alle taxon entries uit de dataset (kan batchgewijs)
res <- occ_search(datasetKey = dataset_key, limit = 3000)  # verhoog 'limit' indien nodig
library(rgbif)
# 3. Dataset key van de Vlaamse Waterweg checklist
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
# 4. Haal alle taxon entries uit de dataset (kan batchgewijs)
res <- occ_search(datasetKey = dataset_key, limit = 3000)  # verhoog 'limit' indien nodig
# 5. Extracteer de species keys
species_keys <- unique(res$data$speciesKey)
# 6. Filter jouw RIPARIAS data met deze keys
riparias_final <- riparias_dvw %>%
filter(species_gbif_key %in% species_keys)
riparias_final
res
res <- occ_search(datasetKey = dataset_key)
res
res <- name_lookup(datasetKey = dataset_key)
res
species_keys <- unique(res$data$nubKey)
specieS_keus
specieS_keys
species_keys
# 6. Filter jouw RIPARIAS data met deze keys
riparias_final <- riparias_dvw %>%
filter(species_gbif_key %in% species_keys)
res
View(res)
View(res$data)
# 5. Extracteer de species keys
species_keys <- unique(res$data$nubKey)%>%
filter(rank != "KINGDOM")
res <- name_lookup(datasetKey = dataset_key)%>%
filter(rank != "KINGDOM")
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
# 4. Haal alle taxon entries uit de dataset
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
species_keys
# 6. Filter jouw RIPARIAS data met deze keys
riparias_final <- riparias_dvw %>%
filter(species_gbif_key %in% species_keys)
# Schrijf als ESRI Shapefile
st_write(riparias_final, "EWS_nieuw.shp", delete_dsn = TRUE)
st_write(riparias_final, "EWS_nieuw.gpkg", layer = "observaties", delete_dsn = TRUE)
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad voor download
tempfile_csv <- tempfile(fileext = ".csv")
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
# 3. Lees CSV en parseer coördinaten
riparias <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
# 4. GBIF checklist filtering
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
riparias_filtered <- riparias %>%
filter(species_gbif_key %in% species_keys)
# 5. Omzetten naar sf en transformeren naar Lambert 72
riparias_sf <- st_as_sf(riparias_filtered, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
# 6. Inlezen van beide shapefiles
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(riparias_sf, dvw_indeling, sparse = FALSE)
riparias_indeling <- riparias_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(riparias_sf, dvw_percelen, sparse = FALSE)
st_crs(dvw_percelen)
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))%>%
st_transform(crs = 31370)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))%>%
st_transform(crs = 31370)
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(riparias_sf, dvw_indeling, sparse = FALSE)
riparias_indeling <- riparias_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(riparias_sf, dvw_percelen, sparse = FALSE)
riparias_percelen <- riparias_sf[rowSums(intersect_percelen) > 0, ]
# 9. Opslaan naar twee afzonderlijke GeoPackages
st_write(riparias_indeling, "./data/output/EWS_indeling.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(riparias_percelen, "./data/input/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
riparias_indeling
riparias <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
View(riparias)
st_crs(riparias)
st_crs(tempfile())
View(tempfile_csv)
tempfile_csv
riparias <- read_csv(tempfile_csv, show_col_types = FALSE)
View(riparias)
riparias <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
riparias
riparias$x
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
riparias_filtered <- riparias %>%
filter(species_gbif_key %in% species_keys)
riparias_filtered
EWS_WFS <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
EWS_WFS_spec <- EWS_WFS %>%
filter(species_gbif_key %in% species_keys)
EWS_WFS_soec
EWS_WFS_spec
st_crs(EWS_WFS_spec)
EWS_WFS_spec$x
EWS_WFS_spec_sf <- st_as_sf(EWS_WFS_spec, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))%>%
st_transform(crs = 31370)
dvw_indeling
plot(dvw_indeling)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))%>%
st_transform(crs = 31370)
plot(dvw_percelen)
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- riparias_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf , dvw_percelen, sparse = FALSE)
EWS_percelen <- riparias_sf[rowSums(intersect_percelen) > 0, ]
st_write(EWS_percelen, "./data/input/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(EWS_kern, "./data/output/EWS_kern.gpkg", layer = "observaties", delete_dsn = TRUE)
intersect_percelen
EWS_WFS_spec_sfEWS_WFS_spec_sf
EWS_WFS_spec_sf
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- EWS_WFS_spec_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf , dvw_percelen, sparse = FALSE)
EWS_percelen <- EWS_WFS_spec_sf[rowSums(intersect_percelen) > 0, ]
intersect_percelen
intesect_indeling
intersect_indeling
EWS_kern <- EWS_WFS_spec_sf[ lengths(st_within(EWS_WFS_spec_sf, dvw_indeling)) > 0, ]
EWS_percelen <- EWS_WFS_spec_sf[ lengths(st_within(EWS_WFS_spec_sf, dvw_percelen)) > 0, ]
EWS_kern
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad voor download
tempfile_csv <- tempfile(fileext = ".csv")
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad voor download
tempfile_csv <- tempfile(fileext = ".csv")
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad voor download
tempfile_csv <- tempfile(fileext = ".csv")
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
# 3. Lees CSV en parse de coördinaten
EWS_WFS <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
# 4. GBIF checklist filtering
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
EWS_WFS_spec <- EWS_WFS %>%
filter(species_gbif_key %in% species_keys)
# 5. Omzetten naar sf en transformeren naar Lambert 72
EWS_WFS_spec_sf <- st_as_sf(EWS_WFS_spec, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
# 6. Inlezen van beide shapefiles
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))%>%
st_transform(crs = 31370)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))%>%
st_transform(crs = 31370)
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- EWS_WFS_spec_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf , dvw_percelen, sparse = FALSE)
EWS_percelen <- EWS_WFS_spec_sf[rowSums(intersect_percelen) > 0, ]
# 9. Opslaan naar twee afzonderlijke GeoPackages
st_write(EWS_kern, "./data/output/EWS_kern.gpkg", layer = "observaties", delete_dsn = TRUE)
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad voor download
tempfile_csv <- tempfile(fileext = ".csv")
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
# 3. Lees CSV en parse de coördinaten
EWS_WFS <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
# 4. GBIF checklist filtering
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
EWS_WFS_spec <- EWS_WFS %>%
filter(species_gbif_key %in% species_keys)
# 5. Omzetten naar sf en transformeren naar Lambert 72
EWS_WFS_spec_sf <- st_as_sf(EWS_WFS_spec, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
# 6. Inlezen van beide shapefiles
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))%>%
st_transform(crs = 31370)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))%>%
st_transform(crs = 31370)
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- EWS_WFS_spec_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf , dvw_percelen, sparse = FALSE)
EWS_percelen <- EWS_WFS_spec_sf[rowSums(intersect_percelen) > 0, ]
# 9. Opslaan naar twee afzonderlijke GeoPackages
st_write(EWS_kern, "./data/output/EWS_kern.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(EWS_percelen, "./data/input/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
library(curl)
library(readr)
# 1. URL en output-bestand
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
file_out <- tempfile(fileext = ".csv")
# 2. Voorzie een curl handle met progress bar
h <- new_handle()
handle_setopt(h, noprogress = FALSE, progressfunction = function(down, up, total_down, total_up) {
cat(sprintf("\rGedownload: %.2f MB", down / 1024 / 1024))
flush.console()
TRUE  # return TRUE to continue
})
# 3. Download met curl + progress bar
tryCatch({
curl_download(url, destfile = file_out, mode = "wb", handle = h)
cat("\n✅ Download voltooid.\n")
# 4. Controleer bestandsgrootte
size_mb <- file.info(file_out)$size / 1024 / 1024
cat(sprintf("Bestandsgrootte: %.2f MB\n", size_mb))
library(curl)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
tempfile_csv <- tempfile(fileext = ".csv")
# 2. Curl-download met progress bar
h <- new_handle()
handle_setopt(h, noprogress = FALSE, progressfunction = function(down, up, total_down, total_up) {
cat(sprintf("\rGedownload: %.2f MB", down / 1024 / 1024))
flush.console()
TRUE
})
tryCatch({
curl_download(url, destfile = tempfile_csv, mode = "wb", handle = h)
cat("\n✅ Download voltooid.\n")
size_mb <- file.info(tempfile_csv)$size / 1024 / 1024
cat(sprintf("Bestandsgrootte: %.2f MB\n", size_mb))
if (size_mb < 5) warning("⚠️ Bestand is kleiner dan verwacht — mogelijk onvolledig.")
}, error = function(e) {
stop("\n❌ Download mislukt: ", e$message)
})
# 3. Lees CSV en parse de coördinaten
EWS_WFS <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
# 4. GBIF checklist filtering
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
EWS_WFS_spec <- EWS_WFS %>%
filter(species_gbif_key %in% species_keys)
# 5. Omzetten naar sf en transformeren naar Lambert 72
EWS_WFS_spec_sf <- st_as_sf(EWS_WFS_spec, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
# 6. Inlezen van beide shapefiles
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg")) %>% st_transform(31370)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg")) %>% st_transform(31370)
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- EWS_WFS_spec_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf, dvw_percelen, sparse = FALSE)
EWS_percelen <- EWS_WFS_spec_sf[rowSums(intersect_percelen) > 0, ]
# 9. Opslaan naar twee afzonderlijke GeoPackages
st_write(EWS_kern, "./data/output/EWS_kern.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(EWS_percelen, "./data/output/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
library(leaflet)
# Vooraf converteren naar WGS84 voor Leaflet-compatibiliteit
EWS_kern_wgs <- st_transform(EWS_kern, 4326)
EWS_percelen_wgs <- st_transform(EWS_percelen, 4326)
dvw_indeling_wgs <- st_transform(dvw_indeling, 4326)
dvw_percelen_wgs <- st_transform(dvw_percelen, 4326)
# Plot met Leaflet
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = dvw_indeling_wgs, color = "#999999", weight = 1,
fillOpacity = 0.2, group = "DVW Indeling") %>%
addPolygons(data = dvw_percelen_wgs, color = "#666666", weight = 1,
fillOpacity = 0.2, group = "DVW Percelen") %>%
addCircleMarkers(data = EWS_kern_wgs, radius = 4, stroke = FALSE,
fillColor = "#3182bd", fillOpacity = 0.7, group = "EWS Kern") %>%
addCircleMarkers(data = EWS_percelen_wgs, radius = 4, stroke = TRUE,
color = "#e41a1c", weight = 1, fillOpacity = 1, group = "EWS Percelen") %>%
addLayersControl(
overlayGroups = c("EWS Percelen", "EWS Kern", "DVW Indeling", "DVW Percelen"),
options = layersControlOptions(collapsed = FALSE)
)
library(curl)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
library(leaflet)
# 1. WFS-CSV downloaden met curl (inclusief voortgangsindicatie)
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
tempfile_csv <- tempfile(fileext = ".csv")
h <- new_handle()
handle_setopt(h, noprogress = FALSE, progressfunction = function(down, up, total_down, total_up) {
cat(sprintf("\rGedownload: %.2f MB", down / 1024 / 1024))
flush.console()
TRUE
})
tryCatch({
curl_download(url, destfile = tempfile_csv, mode = "wb", handle = h)
cat("\nDownload voltooid.\n")
size_mb <- file.info(tempfile_csv)$size / 1024 / 1024
cat(sprintf("Bestandsgrootte: %.2f MB\n", size_mb))
if (size_mb < 5) warning("Bestand is mogelijk onvolledig.")
}, error = function(e) {
stop("Download mislukt: ", e$message)
})
# 2. CSV inlezen en coördinaten extraheren uit het 'location'-veld
EWS_WFS <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
# 3. GBIF-checklist ophalen en filteren
checklist <- name_lookup(datasetKey = "23e95da2-6095-4778-b893-9af18a310cb6")
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
EWS_WFS_spec <- EWS_WFS %>%
filter(species_gbif_key %in% species_keys)
# 4. Omzetten naar sf-object in Lambert 72
EWS_WFS_spec_sf <- st_as_sf(EWS_WFS_spec, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
# 5. DVW-shapefiles inlezen
base_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(base_path, "DVW_indeling.gpkg")) %>% st_transform(31370)
dvw_percelen <- st_read(file.path(base_path, "DVW_percelen.gpkg")) %>% st_transform(31370)
# 6. Intersectie uitvoeren
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- EWS_WFS_spec_sf[rowSums(intersect_indeling) > 0, ]
intersect_percelen <- st_intersects(EWS_WFS_spec_sf, dvw_percelen, sparse = FALSE)
EWS_percelen <- EWS_WFS_spec_sf[rowSums(intersect_percelen) > 0, ]
# 7. Export naar GeoPackage-bestanden
st_write(EWS_kern, "./data/output/EWS_kern.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(EWS_percelen, "./data/output/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
# 8. Visualisatie met Leaflet
layers <- list(
EWS_kern = EWS_kern,
EWS_percelen = EWS_percelen,
dvw_indeling = dvw_indeling,
dvw_percelen = dvw_percelen
)
layers_wgs <- lapply(layers, st_transform, crs = 4326)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = layers_wgs$dvw_indeling, color = "#999999", weight = 1, fillOpacity = 0.2, group = "DVW Indeling") %>%
addPolygons(data = layers_wgs$dvw_percelen, color = "#666666", weight = 1, fillOpacity = 0.2, group = "DVW Percelen") %>%
addCircleMarkers(data = layers_wgs$EWS_kern, radius = 4, stroke = FALSE, fillColor = "#3182bd", fillOpacity = 0.7, group = "EWS Kern") %>%
addCircleMarkers(data = layers_wgs$EWS_percelen, radius = 4, stroke = TRUE, color = "#e41a1c", weight = 1, fillOpacity = 1, group = "EWS Percelen") %>%
addLayersControl(
overlayGroups = c("EWS Percelen", "EWS Kern", "DVW Indeling", "DVW Percelen"),
options = layersControlOptions(collapsed = FALSE)
)
