content = function(file) {
write.csv(filtered_data, file, row.names = FALSE)
}
)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(sf)
library(httr)
library(jsonlite)
library(dplyr)
setwd("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/")
ui <- fluidPage(
titlePanel("Vlaanderen Biodiversiteitskaart"),
sidebarLayout(
sidebarPanel(
selectInput("scale", "Selecteer Schaal",
choices = c("Percelen", "Kerngebieden")),
uiOutput("region_ui"),
uiOutput("district_ui"),
dateRangeInput("dateRange", "Selecteer Tijdsbestek",
start = Sys.Date() - 30, end = Sys.Date()),
actionButton("filter", "Data Filteren")
),
mainPanel(
leafletOutput("map"),
downloadButton("downloadShape", "Exporteer als Shapefile"),
downloadButton("downloadCSV", "Exporteer als CSV")
)
)
)
server <- function(input, output, session) {
observeEvent(input$scale, {
# Dynamische UI voor regio
output$region_ui <- renderUI({
selectInput("region", "Kies een Regio",
choices = c("Alle" = "alle", "aRW", "aRO", "aRC"))
})
})
observeEvent(input$region, {
# Dynamische UI voor district op basis van geselecteerde regio
regio_shapes <- sf::st_read("./data/DVW_indeling.gpkg") # Vervang met jouw GeoPackage
available_districts <- regio_shapes %>%
filter(AFD == input$region) %>%
pull(DSTRCT)
output$district_ui <- renderUI({
selectInput("district", "Kies een District", choices = available_districts)
})
})
observeEvent(input$filter, {
# Kies juiste shape op basis van schaal
shape_file <- if (input$scale == "Percelen") "./data/DVW_percelen.gpkg" else "./data/DVW_indeling.gpkg"
regio_shapes <- sf::st_read(shape_file)
# Filter regio en district
selected_region <- regio_shapes %>% filter(AFD == input$region)
selected_district <- selected_region %>% filter(DSTRCT == input$district)
# WFS-data ophalen
wfs_url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson"  # Vervang met echte URL
query <- list(
service = "WFS",
request = "GetFeature",
typename = "observation",
outputFormat = "application/json"
)
response <- httr::GET(wfs_url, query = query)
data <- jsonlite::fromJSON(content(response, "text"))
# Data omzetten naar sf-object
sf_data <- sf::st_as_sf(data)
# Data filteren op tijd, regio en district
filtered_data <- sf_data %>%
filter(observation_date >= input$dateRange[1] &
observation_date <= input$dateRange[2]) %>%
filter(sf::st_intersects(geometry, selected_district, sparse = FALSE))
# Kaart visualiseren
output$map <- renderLeaflet({
leaflet(filtered_data) %>%
addTiles() %>%
addCircleMarkers(~st_coordinates(geometry)[,1], ~st_coordinates(geometry)[,2],
popup = ~species_scientific_name)
})
# Exporteren van bestanden
output$downloadShape <- downloadHandler(
filename = function() { "filtered_data.shp" },
content = function(file) {
sf::st_write(filtered_data, file)
}
)
output$downloadCSV <- downloadHandler(
filename = function() { "filtered_data.csv" },
content = function(file) {
write.csv(filtered_data, file, row.names = FALSE)
}
)
})
}
shinyApp(ui = ui, server = server)
response <- httr::GET("https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson")
content(response, "text")
library(shiny)
library(leaflet)
library(sf)
library(httr)
library(jsonlite)
library(dplyr)
setwd("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/")
ui <- fluidPage(
titlePanel("Vlaanderen Biodiversiteitskaart"),
sidebarLayout(
sidebarPanel(
selectInput("scale", "Selecteer Schaal",
choices = c("Percelen", "Kerngebieden")),
uiOutput("region_ui"),
uiOutput("district_ui"),
dateRangeInput("dateRange", "Selecteer Tijdsbestek",
start = Sys.Date() - 30, end = Sys.Date()),
actionButton("filter", "Data Filteren"),
br(),
textOutput("progress")
),
mainPanel(
leafletOutput("map"),
downloadButton("downloadShape", "Exporteer als Shapefile"),
downloadButton("downloadCSV", "Exporteer als CSV")
)
)
)
server <- function(input, output, session) {
observeEvent(input$scale, {
# Dynamische UI voor regio
output$region_ui <- renderUI({
selectInput("region", "Kies een Regio",
choices = c("Alle" = "alle", "aRW", "aRO", "aRC"))
})
})
observeEvent(input$region, {
# Dynamische UI voor district op basis van geselecteerde regio
regio_shapes <- sf::st_read("./data/DVW_indeling.gpkg") # Vervang met jouw GeoPackage
available_districts <- regio_shapes %>%
filter(AFD == input$region) %>%
pull(DSTRCT)
output$district_ui <- renderUI({
selectInput("district", "Kies een District", choices = available_districts)
})
})
observeEvent(input$filter, {
output$progress <- renderText({"Data ophalen..."})
# Kies juiste shape op basis van schaal
shape_file <- if (input$scale == "Percelen") "./data/DVW_percelen.gpkg" else "./data/DVW_indeling.gpkg"
regio_shapes <- sf::st_read(shape_file)
# Filter regio en district
selected_region <- regio_shapes %>% filter(AFD == input$region)
selected_district <- selected_region %>% filter(DSTRCT == input$district)
# WFS-data ophalen
wfs_url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson"  # Vervang met echte URL
query <- list(
service = "WFS",
request = "GetFeature",
typename = "observation",
outputFormat = "application/json"
)
response <- httr::GET(wfs_url, query = query)
if (httr::status_code(response) == 200) {
output$progress <- renderText({"Data succesvol opgehaald. Verwerken..."})
data <- jsonlite::fromJSON(content(response, "text"))
# Data omzetten naar sf-object
sf_data <- sf::st_as_sf(data)
# Data filteren op tijd, regio en district
filtered_data <- sf_data %>%
filter(observation_date >= input$dateRange[1] &
observation_date <= input$dateRange[2]) %>%
filter(sf::st_intersects(geometry, selected_district, sparse = FALSE))
# Kaart visualiseren
output$map <- renderLeaflet({
leaflet(filtered_data) %>%
addTiles() %>%
addCircleMarkers(~st_coordinates(geometry)[,1], ~st_coordinates(geometry)[,2],
popup = ~species_scientific_name)
})
# Exporteren van bestanden
output$downloadShape <- downloadHandler(
filename = function() { "filtered_data.shp" },
content = function(file) {
sf::st_write(filtered_data, file)
}
)
output$downloadCSV <- downloadHandler(
filename = function() { "filtered_data.csv" },
content = function(file) {
write.csv(filtered_data, file, row.names = FALSE)
}
)
output$progress <- renderText({"Verwerking voltooid!"})
} else {
output$progress <- renderText({"Fout bij ophalen van data."})
}
})
}
shinyApp(ui = ui, server = server)
response <- httr::GET(wfs_url, query = query)
wfs_url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson"  # Vervang met echte URL
response <- httr::GET(wfs_url, query = query)
query <- list(
service = "WFS",
request = "GetFeature",
typename = "observation",
outputFormat = "application/json"
)
response <- httr::GET(wfs_url, query = query)
if (httr::status_code(response) == 200) {
print(content(response, "text", encoding = "UTF-8"))
} else {
print(paste("Fout:", httr::status_code(response)))
}
getwd()
# Laad benodigde packages
library(readr)
# Definieer URL van de WFS in CSV-formaat
wfs_url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# Download en lees de data
riparias_data <- read_csv(wfs_url)
# 1. URL naar GeoJSON
geojson_url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson"
# 2. Bestandsnaam voor lokale opslag
bestandsnaam <- "riparias_observations.geojson"
# 3. Download het bestand (kan even duren!)
download.file(geojson_url, destfile = bestandsnaam, mode = "wb")
download.file(
url = "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson",
destfile = "riparias_observations.geojson",
mode = "wb"
)
install.packages(c("DBI", "RPostgres", "sf", "readr", "dplyr"))
library(readr)
library(dplyr)
library(sf)
# 1. Download
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
riparias <- read_csv(url)
install.packages(c("DBI", "RPostgres", "sf", "readr", "dplyr"))
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
local_file <- tempfile(fileext = ".csv")
download.file(url, local_file)
GET(url, write_disk(temp, overwrite = TRUE), timeout(600))
library(httr)
GET(url, write_disk(temp, overwrite = TRUE), timeout(600))
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson"
temp <- tempfile(fileext = ".geojson")
GET(url, write_disk(temp, overwrite = TRUE), timeout(600))
# Daarna lees je in met sf:
library(sf)
observations <- st_read(temp)
library(geojsonio)
geojsonio::geojson_read(temp)
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=geojson"
temp <- tempfile(fileext = ".geojson")
GET(url, write_disk(temp, overwrite = TRUE), timeout(6000))
library(sf)
observations <- st_read(temp)
library(readr)
library(dplyr)
library(sf)
library(stringr)
# 1. URL van de CSV WFS
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
tempfile_csv <- tempfile(fileext = ".csv")
download.file(url, tempfile_csv, mode = "wb")  # download als binair bestand
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
# 1. URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad
tempfile_csv <- tempfile(fileext = ".csv")
# 3. Download via httr::GET met verhoogde timeout
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
riparias <- read_csv(tempfile_csv)
View(riparias)
riparias <- read_csv(tempfile_csv, show_col_types = FALSE)
# 5. Parseer x/y-coördinaten uit location (SRID=3857;POINT(x y))
riparias <- riparias %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
View(riparias)
riparias_sf <- st_as_sf(riparias, coords = c("x", "y"), crs = 3857)
# 7. Exporteer naar GeoPackage (voor gebruik in ArcGIS/QGIS)
st_write(riparias_sf, "New_observations.gpkg", delete_dsn = TRUE)
# 5. Inlezen van de DVW-geometrieën
dvw_indeling <- st_read("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data/DVW_indeling.gpkg")
# of alternatief, gebruik de percelen:
# dvw_percelen <- st_read("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data/DVW_percelen.gpkg")
riparias_dvw <- riparias_sf[st_intersects(riparias_sf, dvw_indeling, sparse = FALSE), ]
t_crs(riparias_sf)
st_crs(riparias_sf)
riparias_sf <- st_transform(riparias_sf, crs = 31370)
st_crs(riparias_sf)
dvw_indeling <- st_read("C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data/DVW_indeling.gpkg")
riparias_dvw <- riparias_sf[st_intersects(riparias_sf, dvw_indeling, sparse = FALSE), ]
intersectie_matrix <- st_intersects(riparias_sf, dvw_indeling, sparse = FALSE)
riparias_dvw <- riparias_sf[rowSums(intersectie_matrix) > 0, ]
riparias_dvw
data <- read.csv("./data/input/occurrences/0092676-240506114902167/0092676-240506114902167.csv", sep = "\t")
get<d()
getwd()
setwd(C:/Users/frederique_steen/Documents/GitHub/Camalien)
setwd("C:/Users/frederique_steen/Documents/GitHub/Camalien")
data <- read.csv("./data/input/occurrences/0092676-240506114902167/0092676-240506114902167.csv", sep = "\t")
View(data)
names(data)
riparias_sf
# 3. Dataset key van de Vlaamse Waterweg checklist
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
# 4. Haal alle taxon entries uit de dataset (kan batchgewijs)
res <- occ_search(datasetKey = dataset_key, limit = 3000)  # verhoog 'limit' indien nodig
library(rgbif)
# 3. Dataset key van de Vlaamse Waterweg checklist
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
# 4. Haal alle taxon entries uit de dataset (kan batchgewijs)
res <- occ_search(datasetKey = dataset_key, limit = 3000)  # verhoog 'limit' indien nodig
# 5. Extracteer de species keys
species_keys <- unique(res$data$speciesKey)
# 6. Filter jouw RIPARIAS data met deze keys
riparias_final <- riparias_dvw %>%
filter(species_gbif_key %in% species_keys)
riparias_final
res
res <- occ_search(datasetKey = dataset_key)
res
res <- name_lookup(datasetKey = dataset_key)
res
species_keys <- unique(res$data$nubKey)
specieS_keus
specieS_keys
species_keys
# 6. Filter jouw RIPARIAS data met deze keys
riparias_final <- riparias_dvw %>%
filter(species_gbif_key %in% species_keys)
res
View(res)
View(res$data)
# 5. Extracteer de species keys
species_keys <- unique(res$data$nubKey)%>%
filter(rank != "KINGDOM")
res <- name_lookup(datasetKey = dataset_key)%>%
filter(rank != "KINGDOM")
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
# 4. Haal alle taxon entries uit de dataset
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
species_keys
# 6. Filter jouw RIPARIAS data met deze keys
riparias_final <- riparias_dvw %>%
filter(species_gbif_key %in% species_keys)
# Schrijf als ESRI Shapefile
st_write(riparias_final, "EWS_nieuw.shp", delete_dsn = TRUE)
st_write(riparias_final, "EWS_nieuw.gpkg", layer = "observaties", delete_dsn = TRUE)
library(httr)
library(readr)
library(dplyr)
library(sf)
library(stringr)
library(rgbif)
# 1. WFS-CSV URL
url <- "https://alert.riparias.be/api/wfs/observations?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=observation&OUTPUTFORMAT=csv"
# 2. Tijdelijk pad voor download
tempfile_csv <- tempfile(fileext = ".csv")
GET(url, write_disk(tempfile_csv, overwrite = TRUE), timeout(600))
# 3. Lees CSV en parseer coördinaten
riparias <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
# 4. GBIF checklist filtering
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
riparias_filtered <- riparias %>%
filter(species_gbif_key %in% species_keys)
# 5. Omzetten naar sf en transformeren naar Lambert 72
riparias_sf <- st_as_sf(riparias_filtered, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
# 6. Inlezen van beide shapefiles
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(riparias_sf, dvw_indeling, sparse = FALSE)
riparias_indeling <- riparias_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(riparias_sf, dvw_percelen, sparse = FALSE)
st_crs(dvw_percelen)
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))%>%
st_transform(crs = 31370)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))%>%
st_transform(crs = 31370)
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(riparias_sf, dvw_indeling, sparse = FALSE)
riparias_indeling <- riparias_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(riparias_sf, dvw_percelen, sparse = FALSE)
riparias_percelen <- riparias_sf[rowSums(intersect_percelen) > 0, ]
# 9. Opslaan naar twee afzonderlijke GeoPackages
st_write(riparias_indeling, "./data/output/EWS_indeling.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(riparias_percelen, "./data/input/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
riparias_indeling
riparias <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
View(riparias)
st_crs(riparias)
st_crs(tempfile())
View(tempfile_csv)
tempfile_csv
riparias <- read_csv(tempfile_csv, show_col_types = FALSE)
View(riparias)
riparias <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
riparias
riparias$x
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
riparias_filtered <- riparias %>%
filter(species_gbif_key %in% species_keys)
riparias_filtered
EWS_WFS <- read_csv(tempfile_csv, show_col_types = FALSE) %>%
mutate(
coords = str_remove(location, "^SRID=3857;POINT\\("),
coords = str_remove(coords, "\\)$"),
x = as.numeric(str_extract(coords, "^[^ ]+")),
y = as.numeric(str_extract(coords, "[^ ]+$"))
) %>%
filter(!is.na(x) & !is.na(y))
dataset_key <- "23e95da2-6095-4778-b893-9af18a310cb6"
checklist <- name_lookup(datasetKey = dataset_key)
species_keys <- checklist$data %>%
filter(!rank %in% c("KINGDOM", "PHYLUM", "CLASS", "ORDER", "FAMILY", "GENUS")) %>%
pull(nubKey) %>%
unique()
EWS_WFS_spec <- EWS_WFS %>%
filter(species_gbif_key %in% species_keys)
EWS_WFS_soec
EWS_WFS_spec
st_crs(EWS_WFS_spec)
EWS_WFS_spec$x
EWS_WFS_spec_sf <- st_as_sf(EWS_WFS_spec, coords = c("x", "y"), crs = 3857) %>%
st_transform(crs = 31370)
dvw_path <- "C:/Users/frederique_steen/Documents/GitHub/DVW_WFS/data"
dvw_indeling <- st_read(file.path(dvw_path, "DVW_indeling.gpkg"))%>%
st_transform(crs = 31370)
dvw_indeling
plot(dvw_indeling)
dvw_percelen <- st_read(file.path(dvw_path, "DVW_percelen.gpkg"))%>%
st_transform(crs = 31370)
plot(dvw_percelen)
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- riparias_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf , dvw_percelen, sparse = FALSE)
EWS_percelen <- riparias_sf[rowSums(intersect_percelen) > 0, ]
st_write(EWS_percelen, "./data/input/EWS_percelen.gpkg", layer = "observaties", delete_dsn = TRUE)
st_write(EWS_kern, "./data/output/EWS_kern.gpkg", layer = "observaties", delete_dsn = TRUE)
intersect_percelen
EWS_WFS_spec_sfEWS_WFS_spec_sf
EWS_WFS_spec_sf
# 7. Intersectie met DVW_indeling
intersect_indeling <- st_intersects(EWS_WFS_spec_sf, dvw_indeling, sparse = FALSE)
EWS_kern <- EWS_WFS_spec_sf[rowSums(intersect_indeling) > 0, ]
# 8. Intersectie met DVW_percelen
intersect_percelen <- st_intersects(EWS_WFS_spec_sf , dvw_percelen, sparse = FALSE)
EWS_percelen <- EWS_WFS_spec_sf[rowSums(intersect_percelen) > 0, ]
intersect_percelen
intesect_indeling
intersect_indeling
EWS_kern <- EWS_WFS_spec_sf[ lengths(st_within(EWS_WFS_spec_sf, dvw_indeling)) > 0, ]
EWS_percelen <- EWS_WFS_spec_sf[ lengths(st_within(EWS_WFS_spec_sf, dvw_percelen)) > 0, ]
EWS_kern
